function [REE,eu] = PerfectForesightREE(StateEq,RegIdx,Innovations)

% PerfectForesightREE
%
% Solve for the REE sequence of matrices in a (possibly) regime switching
% economy with perfect foresight.
%
% Inputs
% ------
%
% StateEq
%   Structure with as many elements as regimes and for each element it has
% the following fields: Gamma0, Gamma1, Gamma2, Gamma3, Gamma4, such that 
% we have backward looking (BL) equations written in the form
%     Gamma4*z{t} = Gamma0 + Gamma1*z{t-1} + Gamma2*eps{t}
% and forward looking (FL) equations in the form
%     Gamma4*z{t+1} = Gamma0 + Gamma1*z{t} + Gamma3*eta{t+1}
%   Notice that the system is written as big matrix including BL and FL. It
% does no require any given order of FL and BL equations and they can be
% interchanged, as long as any given equation is written in one of the
% above forms (no hybrids allowed). 
%   This way of writing the system is thus consistent with the gensys
% setup, where z is the vector of all state space variables, eps is the
% vector of all innovations and eta the vector of all endogenous
% expectational errors.
%   Based on these matrices, the code will split the code into forward 
% looking and backward looking equations as needed.
%
% RegIdx
%   Vector array containing the index of the regime that applies to that 
% period. The last element determines which regime is used as the absorbing
% state, beyond which there are no expected regime changes nor innovations.
%
% Innovations (optional)
%   Sequence of expected innovations that need to be incorporated into the 
% numerical solution. Needs to have as many rows as the nummber of 
% exogenous innovations in the model (as many as the columns in Gamma2) and
% as many columns as the number of periods under perfect foresight.
%   Default: zeros (no expected future innovations)
%
% Outputs
% -------
%
% REE
%   Structure with the following fields: Phi0, Phi1 and Phi2, such that the
% reduced form solution can be written as
%     z{t} = REE(t).Phi0 + REE(t).Phi1*z{t-1} + REE(t).Phi2*eps{t}
% and the length of REE is the same as RegIdx and Innovations.
%
% eu
%   return code generated by gensys for the last period REE solution.
%
% .........................................................................
% 
% Created: September 21, 2010 by Vasco Curdia
%          Originally called ZLBREE
% Updated: September 27, 2010 by Vasco Curdia
%          Bug fixes.
% Updated: July 26, 2011 by Vasco Curdia
% 
% Copyright 2010-2011 by Vasco Curdia

%% ------------------------------------------------------------------------

%% Preamble
REE = struct('Phi0',{},'Phi1',{},'Phi2',{});
T = length(RegIdx);
nReg = length(StateEq);
isInnovations = exist('Innovations','var');

%% Run checks
if isInnovations && (size(Innovations,2)~=T)
    error('Length of RegIdx needs to be the same as number of columns in Innovations.')
end
for t=1:nReg
    for j=0:4
        eval(sprintf('Gamma%1$.0f = StateEq(t).Gamma%1$.0f;',j))
    end
    cv = ~all(Gamma3==0,2);
    if ~all(all(Gamma2(cv,:)==0))
        error('Forward Looking equations cannot respond to innovations.\n')
    end
end

%% Run gensys
for j=0:4
    eval(sprintf('Gamma%1$.0f = StateEq(RegIdx(T)).Gamma%1$.0f;',j))
end
[Phi1,Phi0,Phi2,fmat,fwt,ywt,gev,eu] = gensys(Gamma4,Gamma1,Gamma0,Gamma2,Gamma3);
if any(eu~=1),fprintf('WARNING: eu = (%.0f,%.0f)\n',eu),end
REE(T).Phi0 = Phi0;
REE(T).Phi1 = Phi1;
REE(T).Phi2 = Phi2;

%% Recursive REE solution
for t=T-1:-1:1
    for j=0:4
        eval(sprintf('Gamma%1$.0f = StateEq(RegIdx(t)).Gamma%1$.0f;',j))
    end
    cv = ~all(Gamma3==0,2);
    if isInnovations
        Gamma0(cv) = Gamma0(cv)-Gamma4(cv,:)*(REE(t+1).Phi0+REE(t+1).Phi2*Innovations(:,t+1));
    else
        Gamma0(cv) = Gamma0(cv)-Gamma4(cv,:)*REE(t+1).Phi0;
    end
    Gamma4(cv,:) = Gamma4(cv,:)*REE(t+1).Phi1-Gamma1(cv,:);
    Gamma1(cv,:) = 0;
%     Gamma4inv = rbinv(Gamma4);
    Gamma4inv = pinv(Gamma4);
    REE(t).Phi0 = Gamma4inv*Gamma0;
    REE(t).Phi1 = Gamma4inv*Gamma1;
    REE(t).Phi2 = Gamma4inv*Gamma2;
end

%% ------------------------------------------------------------------------
